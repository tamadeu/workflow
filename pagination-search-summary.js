// Resumo da implementa√ß√£o de Pagina√ß√£o e Busca Din√¢mica para Tipos de Solicita√ß√£o

/**
 * üéØ FUNCIONALIDADES IMPLEMENTADAS:
 * 
 * 1. BUSCA DIN√ÇMICA:
 *    ‚úÖ Campo de busca em tempo real
 *    ‚úÖ Busca por: Nome, Descri√ß√£o, Departamentos
 *    ‚úÖ Busca case-insensitive
 *    ‚úÖ √çcone de busca no campo
 *    ‚úÖ Resetar p√°gina ao buscar
 * 
 * 2. PAGINA√á√ÉO:
 *    ‚úÖ 10 itens por p√°gina
 *    ‚úÖ Navega√ß√£o Anterior/Pr√≥xima
 *    ‚úÖ Bot√µes numerados de p√°ginas
 *    ‚úÖ P√°ginas pr√≥ximas √† atual (¬±2)
 *    ‚úÖ Informa√ß√µes de quantidade exibida
 *    ‚úÖ Funciona em Cards e Lista
 * 
 * 3. ESTADOS E FEEDBACK:
 *    ‚úÖ Estado vazio com sugest√£o
 *    ‚úÖ Bot√£o "Limpar busca" quando n√£o h√° resultados
 *    ‚úÖ Contagem total atualizada dinamicamente
 *    ‚úÖ Estados de loading preservados
 * 
 * 4. PERFORMANCE:
 *    ‚úÖ useMemo para otimizar filtragem/pagina√ß√£o
 *    ‚úÖ Rec√°lculo apenas quando necess√°rio
 *    ‚úÖ Manuten√ß√£o do estado de visualiza√ß√£o
 */

// COMPONENTES ADICIONADOS:

// 1. Estados para controle
const [searchTerm, setSearchTerm] = useState("");
const [currentPage, setCurrentPage] = useState(1);
const itemsPerPage = 10;

// 2. L√≥gica de filtragem e pagina√ß√£o
const filteredAndPaginatedRequestTypes = useMemo(() => {
  // Filtra por termo de busca (nome, descri√ß√£o, departamentos)
  const filtered = sortedRequestTypes.filter(requestType => {
    const searchLower = searchTerm.toLowerCase();
    return (
      requestType.name.toLowerCase().includes(searchLower) ||
      (requestType.description || "").toLowerCase().includes(searchLower) ||
      getDepartmentNames(requestType.departmentIds).toLowerCase().includes(searchLower)
    );
  });

  // Calcula pagina√ß√£o
  const totalPages = Math.ceil(filtered.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const paginatedItems = filtered.slice(startIndex, endIndex);

  return {
    items: paginatedItems,
    totalItems: filtered.length,
    totalPages,
    currentPage,
    hasNextPage: currentPage < totalPages,
    hasPrevPage: currentPage > 1
  };
}, [sortedRequestTypes, searchTerm, currentPage, itemsPerPage]);

// 3. Campo de busca
/*
<div className="relative max-w-md">
  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
  <Input
    placeholder="Buscar tipos de solicita√ß√£o..."
    value={searchTerm}
    onChange={(e) => setSearchTerm(e.target.value)}
    className="pl-10"
  />
</div>
*/

// 4. Controles de pagina√ß√£o
/*
<div className="flex items-center justify-between mt-6">
  <div className="text-sm text-gray-500">
    Mostrando X a Y de Z tipos de solicita√ß√£o
  </div>
  
  <div className="flex items-center space-x-2">
    <Button onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}>
      Anterior
    </Button>
    
    {p√°ginas numeradas}
    
    <Button onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}>
      Pr√≥xima
    </Button>
  </div>
</div>
*/

// EXEMPLOS DE USO:

console.log('‚úÖ Busca implementada:');
console.log('- Digite "suporte" ‚Üí filtra tipos com "suporte" no nome/descri√ß√£o');
console.log('- Digite "TI" ‚Üí filtra tipos do departamento de TI');
console.log('- Campo vazio ‚Üí mostra todos os tipos');

console.log('‚úÖ Pagina√ß√£o implementada:');
console.log('- M√°ximo 10 tipos por p√°gina');
console.log('- Navega√ß√£o com bot√µes Anterior/Pr√≥xima');
console.log('- Numera√ß√£o de p√°ginas (1, 2, 3...)');
console.log('- Informa√ß√µes: "Mostrando 1 a 10 de 25 tipos"');

console.log('‚úÖ Estados especiais:');
console.log('- Sem resultados ‚Üí "Nenhum tipo encontrado" + bot√£o limpar');
console.log('- Lista vazia ‚Üí "Nenhum tipo cadastrado"');
console.log('- Contagem atualizada em tempo real');

// BENEF√çCIOS:
// ‚úÖ Experi√™ncia similar ao DataTables
// ‚úÖ Performance otimizada com useMemo
// ‚úÖ Interface responsiva e intuitiva
// ‚úÖ Funciona tanto em Cards quanto em Lista
// ‚úÖ Busca abrangente (nome + descri√ß√£o + departamentos)
// ‚úÖ Pagina√ß√£o completa com navega√ß√£o intuitiva
